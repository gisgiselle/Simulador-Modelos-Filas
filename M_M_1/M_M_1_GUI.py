
# MARKOV (TIPO POISSON) /  MARKOV / 1 SERVIDOR
#Capacidad infinita,
#Una fuente infinita de clientes
#Disciplina FCFS primero que llega, primero que se atiende.

#TO DO: PREGUNTAR FCFS Y PARA QUE DISTRIBUCION

# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


from pathlib import Path

# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage


OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path("assets")


def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)


window = Tk()

window.geometry("849x531")
window.configure(bg = "#3A7FF6")


canvas = Canvas(
    window,
    bg = "#3A7FF6",
    height = 531,
    width = 849,
    bd = 0,
    highlightthickness = 0,
    relief = "ridge"
)

canvas.place(x = 0, y = 0)
canvas.create_rectangle(
    379.0,
    0.0,
    862.0,
    531.0,
    fill="#FCFCFC",
    outline="")

button_image_1 = PhotoImage(
    file=relative_to_assets("button_1.png"))
button_1 = Button(
    image=button_image_1,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: print("button_1 clicked"),
    relief="flat"
)
button_1.place(
    x=531.0,
    y=401.0,
    width=180.0,
    height=55.0
)

canvas.create_text(
    40.0,
    62.0,
    anchor="nw",
    text="Simulador de \nsistema de colas",
    fill="#FCFCFC",
    font=("Roboto Bold", 24 * -1)
)

canvas.create_text(
    40.0,
    127.0,
    anchor="nw",
    text="M/M/1",
    fill="#FCFCFC",
    font=("Roboto Bold", 24 * -1)
)

canvas.create_text(
    424.0,
    62.0,
    anchor="nw",
    text="Ingresa los datos:",
    fill="#505485",
    font=("Roboto Bold", 24 * -1)
)

canvas.create_rectangle(
    40.0,
    174.0,
    100.0,
    179.0,
    fill="#FCFCFC",
    outline="")

entry_image_1 = PhotoImage(
    file=relative_to_assets("entry_1.png"))
entry_bg_1 = canvas.create_image(
    580.5,
    196.5,
    image=entry_image_1
)
entry_1 = Entry(
    bd=0,
    bg="#F1F5FF",
    highlightthickness=0
)
entry_1.place(
    x=436.0,
    y=179.0,
    width=289.0,
    height=33.0
)

canvas.create_text(
    424.0,
    106.0,
    anchor="nw",
    text="Tasa media de servicios  \u03BC",
    fill="#505485",
    font=("RobotoRoman ExtraLight", 20 * -1)
)

canvas.create_text(
    424.0,
    136.0,
    anchor="nw",
    text="Tip: numero de clientes que completan el\n servicio por unidad de tiempo  ",
    fill="#505485",
    font=("RobotoRoman Thin", 14 * -1)
)

entry_image_2 = PhotoImage(
    file=relative_to_assets("entry_2.png"))
entry_bg_2 = canvas.create_image(
    580.5,
    306.5,
    image=entry_image_2
)
entry_2 = Entry(
    bd=0,
    bg="#F1F5FF",
    highlightthickness=0
)
entry_2.place(
    x=436.0,
    y=289.0,
    width=289.0,
    height=33.0
)

canvas.create_text(
    424.0,
    240.0,
    anchor="nw",
    text="Tasa media de llegadas  \u03BB",
    fill="#505485",
    font=("RobotoRoman ExtraLight", 20 * -1)
)

canvas.create_text(
    424.0,
    267.0,
    anchor="nw",
    text="Tip: numero de clientes esperados por unidad de tiempo",
    fill="#505485",
    font=("RobotoRoman Thin", 14 * -1)
)

canvas.create_text(
    40.0,
    229.0,
    anchor="nw",
    text="M: Distribucion de llegadas\n      tipo Markov ",
    fill="#FCFCFC",
    font=("RobotoRoman Light", 15 * -1)
)

canvas.create_text(
    40.0,
    284.0,
    anchor="nw",
    text="M: Distribucion de servicio Markov",
    fill="#FCFCFC",
    font=("RobotoRoman Light", 15 * -1)
)

canvas.create_text(
    40.0,
    321.0,
    anchor="nw",
    text="1: Numero de servidores\n    en paralelo o canales",
    fill="#FCFCFC",
    font=("RobotoRoman Light", 15 * -1)
)
window.resizable(False, False)
window.mainloop()
